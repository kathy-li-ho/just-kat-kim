# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  global(relativePath: String): Global!
  globalConnection(before: String, after: String, first: Float, last: Float, sort: String): GlobalConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String): PagesConnection!
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String): DocumentConnection!
}

union DocumentNode = Global | Pages

type GlobalHeaderNav {
  href: String
  label: String
}

type GlobalHeader {
  nav: [GlobalHeaderNav]
}

type Global implements Node & Document {
  header: GlobalHeader
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type GlobalConnectionEdges {
  cursor: String!
  node: Global
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GlobalConnectionEdges]
}

type PagesBlocksContent {
  heading: String
  body: String
}

type PagesBlocksFooterImage {
  footerImg: String
}

type PagesBlocksPhotosPhotos {
  src: String
}

type PagesBlocksPhotos {
  photos: [PagesBlocksPhotosPhotos]
}

type PagesBlocksVideo {
  url: String
}

union PagesBlocks = PagesBlocksContent | PagesBlocksFooterImage | PagesBlocksPhotos | PagesBlocksVideo

type Pages implements Node & Document {
  blocks: [PagesBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateGlobal(relativePath: String!, params: GlobalMutation!): Global!
  createGlobal(relativePath: String!, params: GlobalMutation!): Global!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
}

input DocumentMutation {
  global: GlobalMutation
  pages: PagesMutation
}

input GlobalHeaderNavMutation {
  href: String
  label: String
}

input GlobalHeaderMutation {
  nav: [GlobalHeaderNavMutation]
}

input GlobalMutation {
  header: GlobalHeaderMutation
}

input PagesBlocksContentMutation {
  heading: String
  body: String
}

input PagesBlocksFooterImageMutation {
  footerImg: String
}

input PagesBlocksPhotosPhotosMutation {
  src: String
}

input PagesBlocksPhotosMutation {
  photos: [PagesBlocksPhotosPhotosMutation]
}

input PagesBlocksVideoMutation {
  url: String
}

input PagesBlocksMutation {
  content: PagesBlocksContentMutation
  footerImage: PagesBlocksFooterImageMutation
  photos: PagesBlocksPhotosMutation
  video: PagesBlocksVideoMutation
}

input PagesMutation {
  blocks: [PagesBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  