# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getGlobalDocument(relativePath: String): GlobalDocument!
  getGlobalList(before: String, after: String, first: Int, last: Int): GlobalConnection!
  getPagesDocument(relativePath: String): PagesDocument!
  getPagesList(before: String, after: String, first: Int, last: Int): PagesConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = GlobalDocument | PagesDocument

type GlobalHeaderNav {
  href: String
  label: String
}

type GlobalHeader {
  nav: [GlobalHeaderNav]
}

type GlobalFooterSocialGmail {
  handle: String
  link: String
}

type GlobalFooterSocialInstagram {
  handle: String
  link: String
}

type GlobalFooterSocialImdb {
  handle: String
  link: String
}

type GlobalFooterSocial {
  gmail: GlobalFooterSocialGmail
  instagram: GlobalFooterSocialInstagram
  imdb: GlobalFooterSocialImdb
}

type GlobalFooter {
  social: GlobalFooterSocial
}

type Global {
  header: GlobalHeader
  footer: GlobalFooter
}

type GlobalDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Global!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type GlobalConnectionEdges {
  cursor: String
  node: GlobalDocument
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [GlobalConnectionEdges]
}

type PagesBlocksContent {
  heading: String
  body: String
}

type PagesBlocksPhotosPhotos {
  photo: String
}

type PagesBlocksPhotos {
  photos: [PagesBlocksPhotosPhotos]
}

type PagesBlocksGalleryGallery {
  photo: String
}

type PagesBlocksGallery {
  gallery: [PagesBlocksGalleryGallery]
}

type PagesBlocksVideo {
  url: String
}

type PagesBlocksFooterImage {
  footerImg: String
}

union PagesBlocks = PagesBlocksContent | PagesBlocksPhotos | PagesBlocksGallery | PagesBlocksVideo | PagesBlocksFooterImage

type Pages {
  blocks: [PagesBlocks]
}

type PagesDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Pages!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PagesConnectionEdges {
  cursor: String
  node: PagesDocument
}

type PagesConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PagesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String!, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateGlobalDocument(relativePath: String!, params: GlobalMutation!): GlobalDocument!
  updatePagesDocument(relativePath: String!, params: PagesMutation!): PagesDocument!
}

input DocumentMutation {
  global: GlobalMutation
  pages: PagesMutation
}

input GlobalHeaderNavMutation {
  href: String
  label: String
}

input GlobalHeaderMutation {
  nav: [GlobalHeaderNavMutation]
}

input GlobalFooterSocialGmailMutation {
  handle: String
  link: String
}

input GlobalFooterSocialInstagramMutation {
  handle: String
  link: String
}

input GlobalFooterSocialImdbMutation {
  handle: String
  link: String
}

input GlobalFooterSocialMutation {
  gmail: GlobalFooterSocialGmailMutation
  instagram: GlobalFooterSocialInstagramMutation
  imdb: GlobalFooterSocialImdbMutation
}

input GlobalFooterMutation {
  social: GlobalFooterSocialMutation
}

input GlobalMutation {
  header: GlobalHeaderMutation
  footer: GlobalFooterMutation
}

input PagesBlocksContentMutation {
  heading: String
  body: String
}

input PagesBlocksPhotosPhotosMutation {
  photo: String
}

input PagesBlocksPhotosMutation {
  photos: [PagesBlocksPhotosPhotosMutation]
}

input PagesBlocksGalleryGalleryMutation {
  photo: String
}

input PagesBlocksGalleryMutation {
  gallery: [PagesBlocksGalleryGalleryMutation]
}

input PagesBlocksVideoMutation {
  url: String
}

input PagesBlocksFooterImageMutation {
  footerImg: String
}

input PagesBlocksMutation {
  content: PagesBlocksContentMutation
  photos: PagesBlocksPhotosMutation
  gallery: PagesBlocksGalleryMutation
  video: PagesBlocksVideoMutation
  footerImage: PagesBlocksFooterImageMutation
}

input PagesMutation {
  blocks: [PagesBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  