{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/kathyli/Documents/just-kat-kim.nosync/pages/[filename].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Blocks } from '../components/blocks';\nexport var __N_SSG = true;\nexport default function HomePage(props) {\n  return __jsx(Blocks, _extends({}, props.data.getPagesDocument.data, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 12\n    }\n  }));\n}\n_c = HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["/Users/kathyli/Documents/just-kat-kim.nosync/pages/[filename].tsx"],"names":["Blocks","HomePage","props","data","getPagesDocument"],"mappings":";;;;AACA,SAASA,MAAT,QAAuB,sBAAvB;;AAIA,eAAe,SAASC,QAAT,CACXC,KADW,EAEb;AACE,SAAO,MAAC,MAAD,eAAYA,KAAK,CAACC,IAAN,CAAWC,gBAAX,CAA4BD,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACH;KAJuBF,Q","sourcesContent":["import { getStaticPropsForTina, staticRequest } from 'tinacms'\nimport { Blocks } from '../components/blocks'\nimport { layoutQueryFragment } from '../components/layout'\nimport type { PagesDocument } from '../.tina/__generated__/types'\n\nexport default function HomePage(\n    props: AsyncReturnType<typeof getStaticProps>['props']\n) {\n    return <Blocks {...props.data.getPagesDocument.data} />\n}\n\nexport const getStaticProps = async ({ params }) => {\n    const tinaProps = (await getStaticPropsForTina({\n        query: `#graphql\n      query ContentQuery($relativePath: String!) {\n        # \"index.md\" is _relative_ to the \"Pages\" path property in your schema definition\n        # you can inspect this file at \"content/pages/index.md\"\n        ${layoutQueryFragment}\n        getPagesDocument(relativePath: $relativePath) {\n          data {\n            __typename\n            blocks {\n              __typename\n              ... on PagesBlocksPhotos {\n                photos {\n                  photo\n                }\n              }\n              ... on PagesBlocksContent {\n                heading\n                body\n              }\n              ... on PagesBlocksFooterImage {\n                footerImg\n              }\n            }\n          }\n        }\n      }\n  `,\n        variables: { relativePath: `${params.filename}.md` },\n    })) as { data: { getPagesDocument: PagesDocument } }\n\n    return {\n        props: {\n            ...tinaProps,\n        },\n    }\n}\n\nexport const getStaticPaths = async () => {\n    const pagesListData = (await staticRequest({\n        query: `#graphql\n      {\n        getPagesList {\n          edges {\n            node {\n              sys {\n                filename\n              }\n            }\n          }\n        }\n      }\n    `,\n    })) as any\n    return {\n        paths: pagesListData.getPagesList.edges.map((page) => ({\n            params: { filename: page.node.sys.filename },\n        })),\n        fallback: false,\n    }\n}\n\nexport type AsyncReturnType<T extends (...args: any) => Promise<any>> =\n    T extends (...args: any) => Promise<infer R> ? R : any\n"]},"metadata":{},"sourceType":"module"}