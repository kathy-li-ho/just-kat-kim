{"ast":null,"code":"var _jsxFileName = \"/Users/kathyli/Documents/just-kat-kim.nosync/pages/[filename].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { getStaticPropsForTina, staticRequest } from 'tinacms';\nimport { Blocks } from '../components/blocks';\nimport { layoutQueryFragment } from '../components/layout';\nexport default function HomePage(props) {\n  return __jsx(Blocks, _extends({}, props.data.getPagesDocument.data, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 12\n    }\n  }));\n}\nexport const getStaticProps = async ({\n  params\n}) => {\n  const tinaProps = await getStaticPropsForTina({\n    query: `#graphql\n      query ContentQuery($relativePath: String!) {\n        # \"index.md\" is _relative_ to the \"Pages\" path property in your schema definition\n        # you can inspect this file at \"content/pages/index.md\"\n        ${layoutQueryFragment}\n        getPagesDocument(relativePath: $relativePath) {\n          data {\n            __typename\n            blocks {\n              __typename\n              ... on PagesBlocksPhotos {\n                photos {\n                  photo\n                }\n              }\n              ... on PagesBlocksContent {\n                heading\n                body\n              }\n              ... on PagesBlocksFooterImage {\n                footerImg\n              }\n            }\n          }\n        }\n      }\n  `,\n    variables: {\n      relativePath: `${params.filename}.md`\n    }\n  });\n  return {\n    props: _objectSpread({}, tinaProps)\n  };\n};\nexport const getStaticPaths = async () => {\n  const pagesListData = await staticRequest({\n    query: `#graphql\n      {\n        getPagesList {\n          edges {\n            node {\n              sys {\n                filename\n              }\n            }\n          }\n        }\n      }\n    `\n  });\n  return {\n    paths: pagesListData.getPagesList.edges.map(page => ({\n      params: {\n        filename: page.node.sys.filename\n      }\n    })),\n    fallback: false\n  };\n};","map":{"version":3,"sources":["/Users/kathyli/Documents/just-kat-kim.nosync/pages/[filename].tsx"],"names":["getStaticPropsForTina","staticRequest","Blocks","layoutQueryFragment","HomePage","props","data","getPagesDocument","getStaticProps","params","tinaProps","query","variables","relativePath","filename","getStaticPaths","pagesListData","paths","getPagesList","edges","map","page","node","sys","fallback"],"mappings":";;;;;;;;;;;;AAAA,SAASA,qBAAT,EAAgCC,aAAhC,QAAqD,SAArD;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,mBAAT,QAAoC,sBAApC;AAGA,eAAe,SAASC,QAAT,CACXC,KADW,EAEb;AACE,SAAO,MAAC,MAAD,eAAYA,KAAK,CAACC,IAAN,CAAWC,gBAAX,CAA4BD,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACH;AAED,OAAO,MAAME,cAAc,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAsB;AAChD,QAAMC,SAAS,GAAI,MAAMV,qBAAqB,CAAC;AAC3CW,IAAAA,KAAK,EAAG;AAChB;AACA;AACA;AACA,UAAUR,mBAAoB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GA3BmD;AA4B3CS,IAAAA,SAAS,EAAE;AAAEC,MAAAA,YAAY,EAAG,GAAEJ,MAAM,CAACK,QAAS;AAAnC;AA5BgC,GAAD,CAA9C;AA+BA,SAAO;AACHT,IAAAA,KAAK,oBACEK,SADF;AADF,GAAP;AAKH,CArCM;AAuCP,OAAO,MAAMK,cAAc,GAAG,YAAY;AACtC,QAAMC,aAAa,GAAI,MAAMf,aAAa,CAAC;AACvCU,IAAAA,KAAK,EAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAb+C,GAAD,CAA1C;AAeA,SAAO;AACHM,IAAAA,KAAK,EAAED,aAAa,CAACE,YAAd,CAA2BC,KAA3B,CAAiCC,GAAjC,CAAsCC,IAAD,KAAW;AACnDZ,MAAAA,MAAM,EAAE;AAAEK,QAAAA,QAAQ,EAAEO,IAAI,CAACC,IAAL,CAAUC,GAAV,CAAcT;AAA1B;AAD2C,KAAX,CAArC,CADJ;AAIHU,IAAAA,QAAQ,EAAE;AAJP,GAAP;AAMH,CAtBM","sourcesContent":["import { getStaticPropsForTina, staticRequest } from 'tinacms'\nimport { Blocks } from '../components/blocks'\nimport { layoutQueryFragment } from '../components/layout'\nimport type { PagesDocument } from '../.tina/__generated__/types'\n\nexport default function HomePage(\n    props: AsyncReturnType<typeof getStaticProps>['props']\n) {\n    return <Blocks {...props.data.getPagesDocument.data} />\n}\n\nexport const getStaticProps = async ({ params }) => {\n    const tinaProps = (await getStaticPropsForTina({\n        query: `#graphql\n      query ContentQuery($relativePath: String!) {\n        # \"index.md\" is _relative_ to the \"Pages\" path property in your schema definition\n        # you can inspect this file at \"content/pages/index.md\"\n        ${layoutQueryFragment}\n        getPagesDocument(relativePath: $relativePath) {\n          data {\n            __typename\n            blocks {\n              __typename\n              ... on PagesBlocksPhotos {\n                photos {\n                  photo\n                }\n              }\n              ... on PagesBlocksContent {\n                heading\n                body\n              }\n              ... on PagesBlocksFooterImage {\n                footerImg\n              }\n            }\n          }\n        }\n      }\n  `,\n        variables: { relativePath: `${params.filename}.md` },\n    })) as { data: { getPagesDocument: PagesDocument } }\n\n    return {\n        props: {\n            ...tinaProps,\n        },\n    }\n}\n\nexport const getStaticPaths = async () => {\n    const pagesListData = (await staticRequest({\n        query: `#graphql\n      {\n        getPagesList {\n          edges {\n            node {\n              sys {\n                filename\n              }\n            }\n          }\n        }\n      }\n    `,\n    })) as any\n    return {\n        paths: pagesListData.getPagesList.edges.map((page) => ({\n            params: { filename: page.node.sys.filename },\n        })),\n        fallback: false,\n    }\n}\n\nexport type AsyncReturnType<T extends (...args: any) => Promise<any>> =\n    T extends (...args: any) => Promise<infer R> ? R : any\n"]},"metadata":{},"sourceType":"module"}